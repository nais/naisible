- name: Ensure PKI directory exists
  file:
    state: directory
    path: "{{ item }}"
  loop:
    - target
    - target/pki
    - target/pki/etcd
    - target/pki/kubelet

- name: Generate CSRs
  template:
    src: "{{ role_path }}/templates/{{ item }}.j2"
    dest: target/pki/{{ item }}.json
  loop:
    - ca-csr
    - etcd-csr
    - front-proxy-ca-csr
    - kube-apiserver-server-csr

- name: Generate kubelet-csrs
  template:
    src: "{{ role_path }}/templates/kubelet-csr.json.j2"
    dest: "target/pki/kubelet/{{ item.split('.')[0] }}-csr.json"
  loop: "{{ groups.all|flatten(levels=1) }}"

- name: Copy ca-config.json
  copy:
    src: "{{ role_path }}/files/ca-config.json"
    dest: target/pki/ca-config.json

- name: Initializing CA
  shell: bin/cfssl gencert -initca target/pki/{{ item }}-csr.json | bin/cfssljson -bare target/pki/{{ item }}
  args:
    creates: target/pki/{{ item }}.pem
  loop:
    - ca
    - front-proxy-ca

- name: Creating admin certificate
  shell: bin/cfssl gencert -ca=target/pki/ca.pem -ca-key=target/pki/ca-key.pem -config=target/pki/ca-config.json -profile=client {{ role_path }}/files/admin-csr.json | bin/cfssljson -bare target/pki/admin
  args:
    creates: target/pki/admin.pem

- name: Creating kube-proxy certificate
  shell: bin/cfssl gencert -ca=target/pki/ca.pem -ca-key=target/pki/ca-key.pem -config=target/pki/ca-config.json -profile=client {{ role_path }}/files/kube-proxy-csr.json | bin/cfssljson -bare target/pki/kube-proxy
  args:
    creates: target/pki/kube-proxy.pem

- name: Creating kubelet certificates
  shell: bin/cfssl gencert -ca=target/pki/ca.pem -ca-key=target/pki/ca-key.pem -config=target/pki/ca-config.json -profile=client target/pki/kubelet/{{ item.split('.')[0] }}-csr.json | bin/cfssljson -bare target/pki/kubelet/{{ item.split('.')[0] }}
  args:
    creates: "target/pki/kubelet/{{ item.split('.')[0] }}.pem"
  loop: "{{ query('inventory_hostnames', 'workers:masters') }}"

- name: Creating kube apiserver certificate
  shell: bin/cfssl gencert -ca=target/pki/ca.pem -ca-key=target/pki/ca-key.pem -config=target/pki/ca-config.json -profile=server target/pki/kube-apiserver-server-csr.json | bin/cfssljson -bare target/pki/kube-apiserver-server
  args:
    creates: target/pki/kube-apiserver-server.pem

- name: Creating front-proxy-client certificate
  shell: bin/cfssl gencert -ca=target/pki/front-proxy-ca.pem -ca-key=target/pki/front-proxy-ca-key.pem -config=target/pki/ca-config.json -profile=client {{ role_path }}/files/front-proxy-client-csr.json | bin/cfssljson -bare target/pki/front-proxy-client
  args:
    creates: target/pki/front-proxy-client.pem

- name: Creating prometheus-adapter certificate
  shell: bin/cfssl gencert -ca=target/pki/front-proxy-ca.pem -ca-key=target/pki/front-proxy-ca-key.pem -config=target/pki/ca-config.json -profile=peer {{ role_path }}/files/prometheus-adapter-csr.json | bin/cfssljson -bare target/pki/prometheus-adapter
  args:
    creates: target/pki/prometheus-adapter.pem

- name: Creating etcd certificate
  shell: bin/cfssl gencert -ca=target/pki/ca.pem -ca-key=target/pki/ca-key.pem -config=target/pki/ca-config.json -profile=server target/pki/etcd-csr.json | bin/cfssljson -bare target/pki/etcd/server
  args:
    creates: target/pki/etcd/server.pem

- name: Creating etcd client certificate
  shell: bin/cfssl gencert -ca=target/pki/ca.pem -ca-key=target/pki/ca-key.pem -config=target/pki/ca-config.json -profile=client target/pki/etcd-csr.json | bin/cfssljson -bare target/pki/etcd/etcd-client
  args:
    creates: target/pki/etcd/etcd-client.pem

- name: Creating etcd peer certificate
  shell: bin/cfssl gencert -ca=target/pki/ca.pem -ca-key=target/pki/ca-key.pem -config=target/pki/ca-config.json -profile=peer target/pki/etcd-csr.json | bin/cfssljson -bare target/pki/etcd/peer-{{ hostvars[item].inventory_hostname.split(".")[0] }}
  args:
    creates: target/pki/etcd/peer-{{ hostvars[item].inventory_hostname.split(".")[0] }}.pem
  loop: "{{ groups.etcd|flatten(levels=1) }}"

- name: Creating service account keypair
  shell: /usr/bin/openssl genrsa -out sa.key 2048 && /usr/bin/openssl rsa -pubout -in sa.key -out sa.pub
  args:
    chdir: target/pki
    creates: sa.pub
