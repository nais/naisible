apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: nais
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nais:coredns
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nais:coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nais:coredns
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: nais
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: nais
data:
  Corefile: |
    .:53 {
        errors
        log . {
            class error
        }
        health :8080 {
          lameduck 15s
        }
        ready :8081
        kubernetes {{ cluster_domain }} {{ service_cidr }} {
            fallthrough in-addr.arpa ip6.arpa
            pods verified
        }
        forward . /etc/resolv.conf
        cache 30
        prometheus 0.0.0.0:9153
        loop
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: nais
  labels:
    k8s-app: coredns
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: coredns
  template:
    metadata:
      labels:
        k8s-app: coredns
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
        nais.io/logformat: coredns
        prometheus.io/scrape: "true"
        prometheus.io/port: "9153"
    spec:
      affinity: # never schedule coredns on a node that is already running one
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:                               
              matchLabels:                               
                k8s-app: coredns
      serviceAccountName: coredns
      containers:
      - name: coredns
        image: coredns/coredns:{{ coredns_version }}
        imagePullPolicy: Always
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          periodSeconds: 2
          successThreshold: 1
          failureThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 8081
            scheme: HTTP
      dnsPolicy: Default
      volumes:
        - name: config-volume
          configMap:
            name: coredns
            items:
            - key: Corefile
              path: Corefile
---
apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: nais
  labels:
    k8s-app: coredns
spec:
  selector:
    k8s-app: coredns
  clusterIP: 10.254.0.54
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
  - name: metrics
    port: 9153
    protocol: TCP
---
