---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
- kind: ServiceAccount
  name: traefik-ingress-controller
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik
  namespace: kube-system
data:
  traefik.toml: |
    defaultEntryPoints = ["https"]

    [traefikLog]
    format = "json"
    
    [accessLog]
    format = "json"

      [accessLog.fields]
        defaultMode = "keep"

        [accessLog.fields.names]
          "ClientAddr" = "drop"
          "DownstreamStatusLine" = "drop"
          "OriginStatusLine" = "drop"
          "RequestAddr" = "drop"
          "StartLocal" = "drop"

        [accessLog.fields.headers]
          defaultMode = "keep"

          [accessLog.fields.headers.names]
            "Authorization" = "redact"
            "Cookie" = "redact"
            "Password" = "redact"
            "Set-Cookie" = "redact"
            "X-Caller-Is-Gsak" = "redact"
            "Nav-Consumer-Token" = "redact"

    [entryPoints]
      [entryPoints.https]
      address = ":443"
        [entryPoints.https.tls]
          [[entryPoints.https.tls.certificates]]
          CertFile = "/tls/tls.crt"
          KeyFile = "/tls/tls.key"
      [entryPoints.traefik]
      address = ":8080"
      [entryPoints.ping]
      address = ":8000"
    [metrics]
      [metrics.prometheus]
        entryPoint = "traefik"
    [ping]
    entryPoint = "ping"
    [lifeCycle]
    requestAcceptGraceTimeout = "25s"
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
  labels:
    k8s-app: traefik-ingress-lb
spec:
  selector:
    matchLabels:
      k8s-app: traefik-ingress-lb
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 1
  replicas: {{ traefik_replicas }}
  template:
    metadata:
      labels:
        k8s-app: traefik-ingress-lb
        name: traefik-ingress-lb
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      affinity: # only one pod per node
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchLabels:
                k8s-app: traefik-ingress-lb
      nodeSelector:
        nais.io/type: worker
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
      - image: traefik:{{ traefik_version }}
        name: traefik-ingress-lb
        volumeMounts:
          - name: config-volume
            mountPath: /config
          - name: certificates
            mountPath: /tls
        resources:
          limits:
            cpu: {{ traefik_cpu_limit }}
            memory: {{ traefik_memory }}
          requests:
            cpu: {{ traefik_cpu_request }}
            memory: {{ traefik_memory }}
        ports:
        - containerPort: 443
          hostPort: 443
          name: ingress
        - containerPort: 8000
          hostPort: 8000
          name: ping
        - containerPort: 8080
          hostPort: 8080
          name: metrics
        args:
        - --kubernetes
        - --checknewversion=false
        - --configfile=/config/traefik.toml
      volumes:
        - name: config-volume
          configMap:
            name: traefik
        - name: certificates
          secret:
            secretName: traefik-cert
